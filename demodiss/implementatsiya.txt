Implementation

---< PINK BOOK >---
This chapter should describe what was actually produced: programs written, hardware built, theory developed.

Any design strategies that looked ahead to the testing stage might profitably be referred to (that goddamn "professional approach" again).

Descriptions of programs may include fragments of high-level code. But large chunks of code are usually best left to appendices or omitted altogether. Analogous advice applies to circuit diagrams. Not that I have any of those.

Draw attention to the parts of the work which are not your own (true: unix, thread, angstrom, rresult, base64, bigstring). Making effective use of powerful tools and pre-existing code is often laudable, and will count to your credit if properly reported.

It should not be necessary to give a day-by-day account of the progress of the work, but - major milestones may sometimes be highlighted with advantage...

Implementation is worth 40% of the marks. My implementation is pretty good, considering. However, it doesn't make effective use of the module system or interfaces; it architects per-client logic differently between client and server; the XML tree vs text distinction ought to have been made in the type system, currently it sticks out like the unnecessary cruft it is; buffering has been a nightmare and is likely sub-par. Still: parsing and flow handled well, much advantageous use of combinators and monads.
---</ PINK BOOK >---

As the objective of this project was to build a server, I developed a server program (server.ml). I used the Psi client software to help develop the server, but for later testing a more automatable client was needed. For this reason, I also developed a basic XMPP client controller (client.ml).
These both make heavy use of the Xml and Xmpp modules.

The Xml module (xml.ml):
XML is central to XMPP. In my code, it comes in three main forms: as text, as low-level 'Raw' XML, and as high-level xml_node. The Xml module provides utilities for working with these representations.

First, a note on terminology. XML is a notation for hierarchical trees, and an XML node has the form <prefix:tag pre1:attr1="value1" pre2:attr2="value2" ... pren:attrn="valuen"> ... children ... </prefix:tag>. attri are the node's attributes. Most of the time, prefixes are absent from attributes, but they are used in a couple of important cases outlined below. I call the combination of prefix and identifier a qualified name. This way, a node can be seen as <qname qname1="value1" qname2="value2" ... qnamen="valuen"> ... </qname>.

[footnote: Technically, there are also text nodes: as XML was designed as a markup language, any point in the tree can be made up of text, or `content'. This case is obviously handled, but does not have any terminological considerations. ]

Namespaces are a way to organise tags and avoid naming conflicts in XML; each tag is qualified by a namespace. Namespaces are typically long strings, and it would be cumbersome to work with XML where every single tag had such a namespace concatenated onto it. Instead, a shorthand for the namespace is prefixed onto tags. The association between a prefix and the namespace it represents is defined by an (ab)use of the XML attribute system: the `attribute' xmlns:foo="bar" is treated specially as saying that the prefix foo represents the namespace bar. A tag can in fact forego a prefix, in which case it is considered to use the default prefix, signified by xmlns="bar". These associations are local to the node and are inherited by its children. There may be other uses of the xmlns: prefix, but I considered namespace definition as the only aspect relevant to this project.

Both explicit and default prefixes are used throughout XMPP. When starting out, I assumed that the particular prefix used on some element would not matter. For instance, the body element of HTML could be written <html:body> (as long as the html prefix referred to the HTML namespace), <body> (provided HTML was the default namespace), or even <quux:body> (if quux referred to the HTML namespace). However, XMPP provides at least one exception to this: the initial <stream> element needs to use the stream: prefix, for unknown reasons. So, a distinction between namespaces and their prefixes was preserved at some level of the system. However, in the other 99% of cases, I considered it sufficient to place constraints only on the namespace and tag, hence why the XML checking functions are prefix-agnostic.

XML-as-text is suitable only for human comprehension; computationally, being a long unstructured block of bytes, it is unsuitable for computer processing. XMPP, though, is built around sending and receiving XML via text, so the ability to parse incoming XML and output XML text was fundamental. The Xml.P module contains Angstrom parsers for XML syntax, producing a `literal' abstract representation defined in Xml.P.Raw. Functions for converting this back into text, for output purposes, also live in Xml.P.Raw.

The main Angstrom parser is tree, which converts nested open/close tags and embedded text into a Raw.Branch node, or Raw.Text if the whole thing consists of just text. This suffices for most of XMPP, but there are some situations that do not involve fully completed trees. For example, setting up the client-server XML stream involves only the opening tag of the stream element; likewise, terminating the stream requires the closing tag. Thus, I included tag_open and tag_close. In addition, before opening the stream, an XML declaration <?xml version="1.0"?> is needed, which uses slightly different syntax to XML tags. Since this syntax does not appear anywhere else, I used a custom parser for this purpose.

These parsers are all implemented in terms of smaller named parsers, combined using the Angstrom parser combinators. For example, I defined tag_open this way:

let tag_open =
  tok_langle *> qual_name >>= fun (ns,id) ->
    lift2 (fun attrs _ -> Raw.Branch ((ns,id,attrs),[]))
      (many attr_val)
      tok_rangle

This can be read as: ``Accept the token <, then a qualified name, then zero or more attribute-value pairs, then the token >; combine the qualified name and the attributes into a Branch node with no children''. To elaborate: tok_langle = lex (char '<'), tok_colon = lex (char ':'), and so on, where lex skips whitespace.

The parsers written in this manner resemble the Context-Free-Grammars of XML structures, although the choice operator <|> is an ordered choice. This shows itself in my implementation of tree:

let tree = fix ( fun t_rec ->
  ( tok_langle *> qual_name >>= fun (ns,id) ->
          lift2 (fun attrs children -> Raw.Branch ((ns, id, attrs), children))
            (many attr_val)
            (tok_leaf *> return [] <|> tok_rangle *> branch t_rec (ns,id)) )
  <|> (take_while1 (function | '<' -> false | _ -> true) >>| Raw.text) )

As an XML node can be simple text, this is accounted for by assuming text content when an attempt to parse a tag fails. With the two cases swapped round [NOTHING HAPPENS!!!]

[MORE ON PARSERS]

The Raw module
As mentioned, the Raw module contains the `literal' abstract XML representation that these parsers target. Consider

<foo:error type="fatal" xmlns:foo="long-application-namespace">
  <a></a>
  <b></b>
  Sample text
</foo:error>

The parent node has a qualified tag foo:error, along with a list of attributes. Each attribute conceptually consists of a prefix, name and value. The prefix might be empty, such as the case of type="fatal". The first task of abstract representation is to make all of these explicit, representing attributes as pairs of qualified names and values. type="fatal" and xmlns:foo="bar" become the list [ (("", "type"), "fatal"); (("xmlns", "foo"), "bar") ]. The above XML source would parse into the following Raw.xml:

Branch ( ("foo", "error", [
    (("", "type"), "fatal");
    (("xmlns", "foo"), "long-application-namespace")
  ]) , [
    Branch ( ("", "a", []) , []) ;
    Branch ( ("", "b", []) , []) ;
    Text "Sample text" ;
] )

Note the `literal' interpretation of the attribute list as an actual OCaml list. Technically, the order of XML attributes does not matter, but it is simpler to use a list at this level. Also, the special considerations of namespaces and prefixes are not handled at this level; it sees xmlns:foo="bar" as just another attribute.

The Raw module provides functions to convert its data structures into strings. The main to_string function, which recursively serialises an XML tree, is as follows:

let rec to_string = function
  | Text str -> str
  | (Branch ((ns,tag,attrs),children)) as xml ->
    match children with
    | [] -> to_string_single (ns,tag,attrs)
    | _  -> let interior = String.concat "" (List.map to_string children) in
            to_string_open xml ^ interior ^ to_string_close xml

An XML node without children can be written as <node></node>. However, it is legal to write such an empty node as <node />, which is often visually cleaner. This is what to_string_single does. Otherwise, the children are recursively serialised and enveloped in the opening and closing tags. [indentation?] [sanitisation?][more on to_string_open, string_of_qname, string_of_attrs]

Utility constructors
Initially, having the Raw representation and its serialisation functions, I simply used them to generate the server responses. However, many elements needed at least a default namespace, all prefixes needed to be explicitly specified, and the syntax was very heavy to write and read:

respond_tree
  (X.Xml (("stream","features",[]),[
    X.Xml (("","mechanisms",[(("","xmlns"),Xmpp.sasl)]),[
        X.Xml (("","mechanism",[]),[ X.Text "PLAIN" ]);
        X.Xml (("","required",[]),[])
      ])
  ]));

After consideration, I reasoned that it would be easier in the long run to add some conveniences for such construction of XML trees in OCaml code. Firstly, I wanted to avoid writing prefixes. The tags mostly use the default (empty) prefix, and the only attribute prefix that is ever used is xmlns:. By handling namespaces in a more convenient fashion, I could avoid having to specify prefixes for both tags and attributes altogether.

For the purposes of output, I committed to using only one, standard prefix per namespace (recall that prefixes are local to parts of a tree, but such freedom is not really needed here). I bundled namespaces and prefixes together, so that I could refer to them by a simple OCaml identifier. For example, the opening <stream:stream> element uses the stream prefix, referring to the namespace http://etherx.jabber.org/streams. I made definitions (in the Xmpp module) like so:

let jstream  = ("stream","http://etherx.jabber.org/streams")
let jclient  = ("client","jabber:client")
let jserver  = ("server","jabber:server")

Other namespaces were only ever used with the default (empty) prefix. I did the same with them:

let streams = ("","urn:ietf:params:xml:ns:xmpp-streams")
let session = ("","urn:ietf:params:xml:ns:xmpp-session")
let sasl    = ("","urn:ietf:params:xml:ns:xmpp-sasl")
let bind    = ("","urn:ietf:params:xml:ns:xmpp-bind")
...

I developed convenience functions to construct XML trees using this: xml_d, xml, xml_n, and text.

For xml_n, the n stands for no namespace. This is used for child XML that does not use namespaces at all. For example, the following:

xml_n "rectangle" [ "width", "240"; "height", "180" ] [
  text "Sample text"
]

constructs the Raw.xml

Raw.Xml (("","rectangle",[(("","width"),"240"); (("","height"),"180")]),[
  Raw.Text "Sample text"
]

xml_d means `declare'. It is similar to xml_n, but accepts a prefix-namespace pair. It applies the prefix to the tag and declares the association between prefix and tag in the attributes, automatically. This means that example [blah] could be constructed like so:

module Xmpp = struct
  ...
  let foo = ("foo", "long-application-namespace")
  ...
end

xml_d Xmpp.foo [ "type", "fatal" ] [
  xml_n "a" [] [];
  xml_n "b" [] [];
  text "Sample text"
]

Finally, xml is a somewhat idiosyncratic variant that exists for child XML that can use a prefix, but does not declare it. [goddammit... doesn't make any bleedin sense!]

The advantages of this notation are clear: high signal-to-noise ratio [footnote OCaml's data constructors are not curried, requiring parentheses, whereas function application does not require them. Also, in some situations, such as lists, it is legal to drop parentheses in pairs: [ (x,y); (z,w) ] becomes [ x,y; z,w ]. ], and the use of functions allows automatic handling of namespaces. The end result is that the code finally looks like the thing it represents.

High-level xml_node
The higher-level representation, xml_node, exists for situations where Raw's data structures become unwieldy. It is defined as follows:

type xml_node =
| Text of lang * string
| Xml of {
  tag    : qname;
  attr   : string -> string option;
  attr_full : qname -> string option;
  namespace : string -> string option;
  lang  : lang;
  child : xml_node list;
  orig  : P.Raw.xml;
}

The main improvement is the use of an opaque attribute lookup function, rather than an explicit data structure. attr_full takes a qualified name, but since most attributes do not have a namespace prefix, the more convenient attr is also provided. attr is implemented as calling attr_full with an empty namespace prefix.

One consideration with namespaces is that prefix-namespace mappings are inherited to child nodes of their declaration site. xml_node incorporates this functionality into the namespace function. It finds the namespace associated with a prefix, delegating to the parent node if unsuccessful. [HOW?]

attr, attr_full and namespace all internally use the standard library's Map structure, being more appropriate for lookup than lists; lists require a linear scan to locate a mapping, and a full scan of the list to determine its absence, whereas Map provides logarithmic-time lookup.

An xml_node is normally constructed from an original Raw.xml structure, and it is useful to keep this information for output purposes. It is stored in the orig field.

[ HOW DO YOU CONVERT RAW TO XML_NODE, JOEL?? ]

Semantic checking and matching
The text-to-Raw parsers solve the problem of structuring XML and detecting syntax errors; after all, not all text is valid XML. However, XMPP is a protocol over XML and hence imposes a second level of `syntax' on top of this. So, in a similar way, not all valid XML is valid XMPP. But this does not entail further structuring of the XML; rather, it mainly involves checking that certain tags or attributes are present, and extracting values of attributes or embedded text nodes --- this problem is one of `pattern matching' rather than parsing. OCaml's built-in pattern matching proved not to be suitable for this purpose [and would not work with the high-level rep], so I went down the route of parsers and combinators modelled after Angstrom.

Unlike Angstrom's parsers, which are designed to be fairly orthogonal fundamental building blocks of more complex parsers, mine are deliberately special-purpose. I went with whatever would be useful to write readable code, without necessarily being exhaustive in the range of behaviours achievable by combining them.

I viewed a `matcher' as a function accepting an xml_node and returning a Result value. Composition of matchers was then to involve both composition of functions, and composition of Result values. The resulting library could be seen as a fusion of the Function and Result monads. [should be footnote?] Application of a matcher to an xml_node is simple function application.

The matchers live in the Xml.Check module. The main ones are tag / qtag, attr / attr_opt, attv, child / children, orig and text.

tag "message" succeeds if the node has the "message" tag
qtag functions like tag, but takes a namespace prefix to also check
attr "id" results in the value of the id attribute if it exists
attv "id" "1234" succeeds if the id attribute exists and is equal to 1234
attr_opt is like attr but does not fail, instead resulting in Some value or None
child gives the first child of the node if it exists
children gives a list of the node's children (possibly the empty list, so this one also never fails)
orig results in the low-level Raw representation from which the xml_node was obtained
text gives the text string of a Text node

I avoid using the word `return' here, as strictly what these functions return is a Result, possibly containing the `resulting' value --- or an error. For those that merely check some condition rather than retrieve a value (tag/qtag and attv), I say they `succeed' instead. This could mean `resulting' in the value (), but I actually found it more useful to `result' in the xml_node passed in.

Matcher combinators
The combinators let me write XML matching code resembling, as closely as possible in OCaml[footnote: short of syntax extensions perhaps, which I am unfamiliar with], the XML itself:

tag "iq" *> attv "type" "get" *> attr "id" >>= fun id -> (* id is now bound to the "id" attribute *)

I implemented the usual *> for `sequence', >>= for `bind', <|> for `alternative' and the direction-reversed versions where needed.

The implementations are all fairly straightforward and similar to each other. For instance, attr:

let attr k = function
  | Xml xml -> (match xml.attr k with
    | Some v -> Ok v
    | None -> Error (format "Expected %s attribute in <%s> tag" k (snd xml.tag)) )
  | Text _ -> Error "Expected XML, not content"

Out of the above matchers, only text makes sense for text nodes. Unfortunately, because both the low- and high-level XML types incorporate the possibility of text, all matchers except Text have to account for this case at runtime.

Output functions designed for convenience of notation; get around compulsory parentheses for data ctors by using functions; provide common defaults via different functions; namespace automagic. Large input/output asymmetry; output to Raw is fine and natural. Input to Raw: very cumbersome to pattern match, etc. Lists of attrs: quick-and-dirty implementation of key[attr]-value map. Superfluous order, linear scan to retrieve attribute value, full scan to determine absence of attribute. Namespace short/long/default forms not handled, nor inherited / nested namespaces; qname cruft needed approximately 1% of the time. So: enter xml_node; Text augmented with lang... and attr is a function (using Map struct), namespace is a function, etc. Converting Raw to xml_node handles nesting of namespaces.

xml_node enables higher-level combinators (the Check module):
tag "message" succeeds if the node has the "message" tag (irrespective of namespace considerations)
qtag functions like tag, but takes a namespace prefix to also check
attr "id" results in the value of the id attribute if it exists
attv "id" "1234" succeeds if the id attribute exists and is equal to 1234
attr_opt is like attr but does not fail, instead resulting in Some value or None
child gives the first child of the node if it exists
children gives a list of the node's children (possibly the empty list, so this one also never fails)
orig results in the low-level Raw representation from which the xml_node was obtained
text gives the text string of a Text node

xml.ml also contains the hack-y expect and buffered_expect.

xmpp.ml:
namespace defs
Roster module
underpopulated Stanza module (containing Iq only)

server.ml:
Dispatch machinery
sv_start driver
per_client; XMPP handshake

The server program uses a simple `driver' to spawn off a thread each time a client connects. The function sv_start () simply performs Unix.establish_server on the local loopback address, passing in the function per_client.

When Unix.establish_server accepts a client connection, it opens a read and a write channel and passes them to per_client. The XMPP protocol then follows in two broad stages, setup and service. Setup involves handshaking with the client, performing authentication and resource binding, and the initial presence. Service consists of responding to client requests and delivering messages to the client.

All of these stages make use of the Result monad to deal with errors. Errors that occur during handshaking abort the protocol, as do fundamental errors during service (such as malformed XML). The service stage also deals with certain recoverable errors in individual stanzas, such as requests for unimplemented functionality.

Setup



client.ml:
object rationale
symmetric duplication of server.ml :/
